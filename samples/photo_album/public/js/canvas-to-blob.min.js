(function (global) {
    "use strict";

    const canvasPrototype = global.HTMLCanvasElement && global.HTMLCanvasElement.prototype;

    const isBlobSupported = global.Blob && (() => {
        try {
            return Boolean(new Blob());
        } catch {
            return false;
        }
    })();

    const isUint8ArrayBlobSupported = isBlobSupported && global.Uint8Array && (() => {
        try {
            return new Blob([new Uint8Array(100)]).size === 100;
        } catch {
            return false;
        }
    })();

    const BlobBuilder = global.BlobBuilder || global.WebKitBlobBuilder || global.MozBlobBuilder || global.MSBlobBuilder;

    const dataURLtoBlob = (dataURL) => {
        const [header, base64Data] = dataURL.split(",");
        const isBase64 = header.indexOf("base64") >= 0;
        const binaryString = isBase64 ? atob(base64Data) : decodeURIComponent(base64Data);

        const arrayBuffer = new ArrayBuffer(binaryString.length);
        const uintArray = new Uint8Array(arrayBuffer);

        for (let i = 0; i < binaryString.length; i++) {
            uintArray[i] = binaryString.charCodeAt(i);
        }

        const mimeType = header.split(":")[1].split(";")[0];

        return isBlobSupported ? new Blob([isUint8ArrayBlobSupported ? uintArray : arrayBuffer], { type: mimeType })
            : (() => {
                const builder = new BlobBuilder();
                builder.append(arrayBuffer);
                return builder.getBlob(mimeType);
            })();
    };

    if (global.HTMLCanvasElement && !canvasPrototype.toBlob) {
        if (canvasPrototype.mozGetAsFile) {
            canvasPrototype.toBlob = function (callback, mimeType, quality) {
                if (quality && this.toDataURL && dataURLtoBlob) {
                    callback(dataURLtoBlob(this.toDataURL(mimeType, quality)));
                } else {
                    callback(this.mozGetAsFile("blob", mimeType));
                }
            };
        } else if (canvasPrototype.toDataURL && dataURLtoBlob) {
            canvasPrototype.toBlob = function (callback, mimeType, quality) {
                callback(dataURLtoBlob(this.toDataURL(mimeType, quality)));
            };
        }
    }

    if (typeof define === "function" && define.amd) {
        define(() => dataURLtoBlob);
    } else {
        global.dataURLtoBlob = dataURLtoBlob;
    }

})(this);
