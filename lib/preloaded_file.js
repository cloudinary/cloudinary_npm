// Generated by CoffeeScript 1.12.7
(function() {
  var PRELOADED_CLOUDINARY_PATH, PreloadedFile, config, utils;

  utils = require("./utils");

  config = require("./config");

  PRELOADED_CLOUDINARY_PATH = /^([^\/]+)\/([^\/]+)\/v(\d+)\/([^#]+)#([^\/]+)$/;

  PreloadedFile = (function() {
    function PreloadedFile(file_info) {
      var matches, public_id_and_format;
      matches = file_info.match(PRELOADED_CLOUDINARY_PATH);
      if (!matches) {
        throw "Invalid preloaded file info";
      }
      this.resource_type = matches[1];
      this.type = matches[2];
      this.version = matches[3];
      this.filename = matches[4];
      this.signature = matches[5];
      public_id_and_format = this.split_format(this.filename);
      this.public_id = public_id_and_format[0];
      this.format = public_id_and_format[1];
    }

    PreloadedFile.prototype.is_valid = function() {
      var expected_signature, public_id;
      public_id = this.resource_type === "raw" ? this.filename : this.public_id;
      expected_signature = utils.api_sign_request({
        public_id: this.public_id,
        version: this.version
      }, config().api_secret);
      return this.signature === expected_signature;
    };

    PreloadedFile.prototype.split_format = function(identifier) {
      var format, last_dot, public_id;
      last_dot = identifier.lastIndexOf(".");
      if (last_dot === -1) {
        return [identifier, null];
      }
      public_id = identifier.substr(0, last_dot);
      format = identifier.substr(last_dot + 1);
      return [public_id, format];
    };

    PreloadedFile.prototype.identifier = function() {
      return "v" + this.version + "/" + this.filename;
    };

    PreloadedFile.prototype.toString = function() {
      return this.resource_type + "/" + this.type + "/v" + this.version + "/" + this.filename + "#" + this.signature;
    };

    PreloadedFile.prototype.toJSON = function() {
      var key, ref, result, val;
      result = {};
      ref = this;
      for (key in ref) {
        val = ref[key];
        if (typeof val !== 'function') {
          result[key] = val;
        }
      }
      return result;
    };

    return PreloadedFile;

  })();

  module.exports = PreloadedFile;

}).call(this);

//# sourceMappingURL=preloaded_file.js.map
